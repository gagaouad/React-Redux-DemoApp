import React, { useRef, useEffect } from 'react';
import Card from '@material-ui/core/Card';
import CardContent from '@material-ui/core/CardContent';
import Typography from '@material-ui/core/Typography';
import PropTypes from 'prop-types';
import { connect } from 'react-redux';
import { withRouter } from 'react-router';
import Grid from '@material-ui/core/Grid';
import { v4 as uuidv4 } from 'uuid';
import { makeStyles } from '@material-ui/core/styles';
import CardActions from '@material-ui/core/CardActions';
import IconButton from '@material-ui/core/IconButton';
import FavoriteIcon from '@material-ui/icons/Favorite';
import DeleteIcon from '@material-ui/icons/Delete';
import { addDrawPoints, nextBoard, resetDrawPoints } from '../../actions';
import OneDollar from '../../onedollar';

const useStyles = makeStyles(() => ({
  root: {
    flexGrow: 1,
  },
  postit: {
    height: '90%',
    width: '94%',
    'margin-left': 'auto',
    'margin-right': 'auto',
  },
  canvastyle: {
    height: 300,
    width: '100%',
    background: '#fff',
  },
}));

function PostitEditor({
  boards, currentBoard, posIndex, addPoints, next,
}) {
  const classes = useStyles();
  const { postits } = boards[currentBoard];
  const clickX = [];
  const clickY = [];
  const clickDrag = [];
  const gesturePoints = [];
  let { paint, gesture } = false;
  const refCanvas = useRef(null);

  const options = {
    score: 80, // The similarity threshold to apply the callback(s)
    parts: 64, // The number of resampling points
    step: 2, // The degree of one single rotation step
    angle: 45, // The last degree of rotation
    size: 250, // The width and height of the scaling bounding box
  };
  const recognizer = new OneDollar(options);

  // Let's "teach" two gestures to the recognizer:
  recognizer.add('triangle', [
    [627, 213],
    [626, 217],
    [617, 234],
    [611, 248],
    [603, 264],
    [590, 287],
    [552, 329],
    [524, 358],
    [489, 383],
    [461, 410],
    [426, 444],
    [416, 454],
    [407, 466],
    [405, 469],
    [411, 469],
    [428, 469],
    [453, 470],
    [513, 478],
    [555, 483],
    [606, 493],
    [658, 499],
    [727, 505],
    [762, 507],
    [785, 508],
    [795, 508],
    [796, 505],
    [796, 503],
    [796, 502],
    [796, 495],
    [790, 473],
    [785, 462],
    [776, 447],
    [767, 430],
    [742, 390],
    [724, 362],
    [708, 340],
    [695, 321],
    [673, 289],
    [664, 272],
    [660, 263],
    [659, 261],
    [658, 256],
    [658, 255],
    [658, 255],
  ]);
  recognizer.add('circle', [
    [621, 225],
    [616, 225],
    [608, 225],
    [601, 225],
    [594, 227],
    [572, 235],
    [562, 241],
    [548, 251],
    [532, 270],
    [504, 314],
    [495, 340],
    [492, 363],
    [492, 385],
    [494, 422],
    [505, 447],
    [524, 470],
    [550, 492],
    [607, 523],
    [649, 531],
    [689, 531],
    [751, 523],
    [782, 510],
    [807, 495],
    [826, 470],
    [851, 420],
    [859, 393],
    [860, 366],
    [858, 339],
    [852, 311],
    [833, 272],
    [815, 248],
    [793, 229],
    [768, 214],
    [729, 198],
    [704, 191],
    [678, 189],
    [655, 188],
    [623, 188],
    [614, 188],
    [611, 188],
    [611, 188],
  ]);
  recognizer.add('arrow',
    [[67, 76],
      [67, 77.921], [67, 78.23889], [67, 79.84207], [67, 80.00757782559516],
      [67, 80.47778719984197], [67, 81.66939996086471], [67, 81.76311011431052],
      [67, 81.89162218308694], [67, 82.71668079976295], [67, 83.6841468190807],
      [67, 84.01515565119033], [67, 84.95557439968394], [67, 85.60518352385087],
      [67, 87.19446799960492], [67, 87.33879992172942], [67, 87.52622022862104],
      [67, 87.78324436617388], [67, 88.02273347678549], [67, 89.43336159952591],
      [67, 89.44725693339122], [67, 91.36829363816139], [67, 91.6722551994469],
      [67, 92.03031130238065], [67, 93.00819988259413], [67, 93.28933034293156],
      [67, 93.67486654926081], [67, 93.91114879936788], [67, 95.21036704770174],
      [67, 96.03788912797582], [67, 96.15004239928886], [67, 97.13140375247191],
      [67, 98.38893599920985], [67, 98.67759984345884], [67, 99.05244045724208],
      [67, 99.56648873234775], [67, 100.04546695357098], [67, 100.62782959913083],
      [67, 100.97347716201226], [67, 102.86672319905182], [67, 102.89451386678243],
      [67, 104.05304477916614], [67, 104.34699980432354], [67, 104.8155505715526],
      [67, 105.1056167989728], [67, 105.45811091543469], [67, 106.73658727632278],
      [67, 107.34451039889379], [67, 108.0606226047613], [67, 108.65762398109295],
      [67, 109.58340399881477], [67, 110.01639976518825], [67, 110.57866068586313],
      [67, 111.34973309852163], [67, 111.82229759873576], [67, 112.06820043035647],
      [67, 112.4996973906333], [67, 114.06119119865674], [67, 114.42073409540347],
      [67, 115.68579972605296], [67, 116.07577825595163], [67, 116.30008479857773],
      [67, 116.34177080017365], [67, 117.24135528160856], [67, 118],
      [67.26272332572805, 117.99334877656385], [67.5388057596735, 117.98635934785636],
      [69.0826887669616, 117.94727370210224], [69.18314470802736, 117.94473051372083],
      [69.77698222517509, 117.92969665252721], [70.3541249912825, 117.91508544325868],
      [71.10356609032667, 117.8961122508778], [72.01515869067669, 117.87303395719806],
      [72.13133333349872, 117.87009282700004], [73.02398747262598, 117.84749398803478],
      [73.0889829353087, 117.84584853328332], [74.25333515617828, 117.81637126186891],
      [74.94440885492529, 117.79887572519176], [76.0217090007999, 117.77160230377721],
      [76.49151162167988, 117.75970856653974], [76.8648302372246, 117.75025746234874],
      [77.09527710365582, 117.74442336446441], [78.02106838579314, 117.72098561048625],
      [78.72968808718147, 117.70304587121059], [78.7852516195239, 117.70163919950572],
      [80.70567300182321, 117.6530209366627], [80.96786455268307, 117.64638317588144],
      [81.10157127200293, 117.64299819564549], [81.6892930103173, 117.62811916429575],
      [82.62609438412252, 117.60440267381968], [83.20604101818466, 117.58972048055229],
      [83.91080343808757, 117.57187839397247], [84.54651576642183, 117.55578441097666],
      [85.10786544035004, 117.54157302682657], [85.44421748368626, 117.53305778522312],
      [86.46693714872114, 117.50716614813363], [87.3568770198347, 117.48463602481431],
      [87.68239394918785, 117.47639508989397], [88.38735853102045, 117.45854788529061],
      [89.11415960869715, 117.44014785800766], [89.800538490382, 117.42277117745867],
      [89.92057041468945, 117.41973239456482], [90.30777991331976, 117.40992962244759],
      [92.15874688019105, 117.36306969923567], [92.22820129561907, 117.36131135960457],
      [93.0244610293521, 117.34115288533285], [93.12045377704426, 117.33872268918874],
      [94.14862267791838, 117.31269309676155], [94.39692334569264, 117.3064070039065],
      [95.69027354267642, 117.27366396094489], [96.06904406021769, 117.26407483391853],
      [96.63509981119424, 117.24974430857735], [97.12674794539137, 117.23729752036982],
      [97.989465442517, 117.2154565710755], [98.6920450388695, 117.1976697458514],
      [98.87327627669583, 117.1930816132482], [99.90988682481631, 117.16683830823249],
      [101.11145274219743, 117.13641891791904], [101.13304211373848, 117.13587235155092],
      [101.58000859497085, 117.1245567444311], [101.83030820711562, 117.11822004538946],
      [103.34962920769902, 117.07975622258988], [103.75072958941493, 117.06960178254644],
      [104.35962904838689, 117.05418660636994], [105.1393362820856, 117.034447182732],
      [105.58780567320062, 117.02309352726073], [105.67115097171424, 117.02098351970342],
      [107.46974364726528, 116.97544952791732], [107.59157235401355, 116.9723652568604],
      [107.82598213870222, 116.96643083193158], [109.1456304504327, 116.93302201391307],
      [109.51199373631286, 116.92374699401738], [110.02721305790429, 116.91070346688849],
      [110.06415860420381, 116.90976813660242], [111.43241511861217, 116.87512873117436],
      [112.3023350697054, 116.85310544127326], [113.15192461877982, 116.83159684509417],
      [113.35283650091148, 116.82651046833134], [113.3594786995597, 116.82634231140354],
      [114.540511535207, 116.7964427459441], [115.27325788321079, 116.77789220548831],
      [115.69479706742169, 116.76722032740703], [116.7786880007086, 116.73978005061495],
      [117.15821878712693, 116.73017167627525], [117.1936792655101, 116.72927394264529],
      [119.0168644662102, 116.6831173552858], [119.11410064780941, 116.68065567980227],
      [119.24921375185413, 116.67723509488975], [121.03452203010872, 116.63203741695925],
      [121.16451295547404, 116.62874650745633], [121.25504093171179, 116.62645465995664],
      [121.36238107693909, 116.62373718792557], [122.95494341240803, 116.58341915411623],
      [123.49321739721339, 116.56979196462748], [124.87536479470734, 116.5348008912732],
      [125.13894880414855, 116.52812787837597], [125.17080712382115, 116.52732133863742],
      [125.73139386271498, 116.51312926929833], [126.79578617700665, 116.48618262843019],
      [127.02996508645649, 116.48025404844411], [127.96957032821658, 116.45646657396918],
      [128.71620755930596, 116.43756436558716], [129.17710129216826, 116.4258961698185],
      [130.20774679371817, 116.39980387864001], [130.63662894160527, 116.38894610274414],
      [131.02868385644297, 116.37902066186217], [132.44592325921977, 116.34314118331086],
      [132.55705032390458, 116.34032783990112], [132.6975490959739, 116.33677090896266],
      [133.18339546051538, 116.32447100099958], [134.4774717062039, 116.2917095770581],
      [134.68409972472136, 116.28647848798171], [136.3978930885032, 116.24309131421508],
      [136.91841890873738, 116.2299134453484], [136.92227619022296, 116.22981579265256],
      [137.1896896288625, 116.22304583218067], [138.3183144708025, 116.19447305137206],
      [138.3651331054913, 116.1932877694812], [139.16045265572455, 116.17315309732341],
      [140.23873585310182, 116.14585478852905], [141.19598379720964, 116.12162066336177],
      [141.39862912122615, 116.11649040199426], [142.15915723540112, 116.09723652568603],
      [142.8081539610318, 116.08080622883463], [143.63680558672775, 116.05982770666512],
      [144.03271711500872, 116.04980462999977], [144.07957861770043, 116.04861826284302],
      [145.20227796555676, 116.02019549454286], [145.87498205222934, 116.00316501133597],
      [145.99999999999974, 116], [146, 116], [146.1055599122321, 118.11119824464235],
      [146.13476931572765, 118.69538631455355], [146.1602797849775, 119.20559569955024],
      [146.1848434268702, 119.69686853740446], [146.2173649232031, 120.34729846406208],
      [146.32916993417408, 122.5833986834818], [146.3604086713049, 123.2081734260984],
      [146.42898288748478, 124.57965774969621], [146.44097494514506, 124.81949890290153],
      [146.46795975041758, 125.35919500835205], [146.55277995611604, 127.05559912232125],
      [146.5605375576323, 127.21075115264655], [146.66458496708702, 129.29169934174098],
      [146.7231964592419, 130.4639291848389], [146.75107607396495, 131.02152147929965],
      [146.7606664439597, 131.2133288791947], [146.776389978058, 131.5277995611607],
      [146.88819498902902, 133.7638997805804], [146.96079533028714, 135.21590660574284], [147, 136],
      [147.32539750455265, 135.8748471136336], [147.63906381475047, 135.75420622509597],
      [150.00771081402655, 134.84318814845133], [152.82431718254531, 133.75987800671334],
      [152.93057335803135, 133.719010246911], [153.7481659690626, 133.40455155036054],
      [157.48862112409864, 131.96591495226974], [158.22208290131223, 131.68381426872605],
      [158.32323686053797, 131.64490889979308], [161.2290762791347, 130.52727835417895],
      [163.51359244459312, 129.6486182905411], [163.82215653853063, 129.52993979287282],
      [164.96953143417073, 129.08864175608815], [168.70998658920678, 127.65000515799736],
      [168.805101987874, 127.61342231235612], [169.3210762165233, 127.41497068595254],
      [172.45044174424282, 126.21136855990656], [174.09661153115488, 125.57822633417116],
      [174.81999589451596, 125.30000157903228], [176.19089689927887, 124.77273196181578],
      [179.38812107443576, 123.5430303559862], [179.9313520543149, 123.33409536372498],
      [180.31891557250862, 123.18503247211201], [183.67180720935096, 121.8954587656342],
      [184.67963061771664, 121.50783437780125], [185.8178352505013, 121.07006336519177],
      [187.412262364387, 120.45682216754342], [189.97114016099752, 119.4726383996163],
      [191.15271751942305, 119.01818556945264], [191.31675492849396, 118.95509425827152],
      [194.8931726744591, 117.57954897136185], [195.2626497042784, 117.43744242143134],
      [196.81567460648662, 116.84012515135126], [198.63362782949514, 116.14091237327106],
      [200.55415924755928, 115.4022464432464], [202.31459428447928, 114.725156044431],
      [202.37408298453119, 114.70227577518028], [205.84566879084016, 113.36705046506145],
      [206.11453813956723, 113.2636391770895], [207.81351396247194, 112.61018693751076],
      [209.85499329460328, 111.8250025789987], [211.13717833412105, 111.3318544868765],
      [213.3124336404646, 110.4952178305905], [213.59544844963932, 110.38636598090793],
      [216.42868787740193, 109.29665850869154], [217.33590360467537, 108.94772938281714],
      [218.81135331845726, 108.38024872367026], [221.0763587597114, 107.50909278472636],
      [221.7201974206828, 107.26146253050659], [224.31027299644992, 106.26527961675001],
      [224.81681391474746, 106.07045618663557], [227.0117069639637, 105.22626655232163],
      [228.5572690697835, 104.63181958854479], [229.80919267444258, 104.15031050982975],
      [232.29772422481955, 103.193182990454], [232.30321650724457, 103.19107057413669],
      [235.30811235243527, 102.03534140290951], [236.0381793798556, 101.75454639236322],
      [237.59472605052545, 101.15587459595174], [239.77863453489164, 100.31590979427244],
      [240.80703203042793, 99.92037229598925], [242.88623559380633, 99.12067861776679],
      [243.51908968992768, 98.87727319618165], [246.3059517084206, 97.805403189069],
      [247.25954484496373, 97.43863659809087], [248.17774513708721, 97.08548263958184],
      [250.99999999999977, 96.00000000000009], [251, 96], [250.21750329520071, 95.63758047356664],
      [248.59938832052586, 94.88813774845408], [244.87144850853466, 93.16151299342658],
      [243.45497785827442, 92.50546342909553], [239.5253937218686, 90.68544551328652],
      [238.31056739602298, 90.12278910973697], [234.17933893520257, 88.20937803314646],
      [233.16615693377153, 87.74011479037841], [228.8332841485365, 85.73331055300642],
      [228.0217464715201, 85.35744047101986], [223.48722936187048, 83.25724307286634],
      [222.87733600926865, 82.9747661516613], [218.14117457520442, 80.7811755927263],
      [217.7329255470172, 80.59209183230274], [212.7951197885384, 78.30510811258624],
      [212.58851508476576, 78.20941751294419], [207.44906500187233, 75.82904063244618],
      [207.44410462251432, 75.82674319358563], [202.29969416026287, 73.44406887422706],
      [202.1030102152063, 73.3529731523061], [197.15528369801143, 71.06139455486849],
      [196.75695542854024, 70.87690567216605], [192.01087323576, 68.67872023550993],
      [191.4109006418742, 68.40083819202599], [186.86646277350854, 66.29604591615136],
      [186.06484585520818, 65.92477071188591], [181.7220523112571, 63.91337159679279],
      [180.71879106854212, 63.44870323174586], [176.57764184900566, 61.53069727743423],
      [175.3727362818761, 60.97263575160579], [171.43323138675422, 59.148022958075664],
      [170.02668149521006, 58.496568271465726], [166.28882092450277, 56.76534863871709],
      [164.68062670854403, 56.02050079132567], [161.14441046225133, 54.38267431935852],
      [159.334571921878, 53.5444333111856], [156, 52], [156, 54.216755633826025],
      [156, 60.10837781691296], [156, 65.9999999999999], [156, 66], [66, 76]]);
  const addClick = (x, y, d) => {
    clickX.push(x);
    clickY.push(y);
    clickDrag.push(d);
  };
  const redraw = () => {
    const context = refCanvas.current.getContext('2d');
    const { width, height } = refCanvas.current.getBoundingClientRect();
    refCanvas.current.setAttribute('width', width);
    refCanvas.current.setAttribute('height', height);
    context.clearRect(0, 0, context.width, context.height);

    context.strokeStyle = '#df4b26';
    context.lineJoin = 'round';
    context.lineWidth = 2;
    const x = postits[posIndex].drawing.clickX.concat(clickX);
    const y = postits[posIndex].drawing.clickY.concat(clickY);
    const d = postits[posIndex].drawing.clickDrag.concat(clickDrag);
    for (let i = 0; i < x.length; i += 1) {
      context.beginPath();
      if (d[i] && i) {
        context.moveTo(x[i - 1], y[i - 1]);
      } else {
        context.moveTo(x[i] - 1, y[i]);
      }
      context.lineTo(x[i], y[i]);
      context.closePath();
      context.stroke();
    }
    if (gesturePoints.length > 0) {
      context.strokeStyle = '#245';
      context.lineWidth = 5;
      context.beginPath();
      context.moveTo(gesturePoints[0][0], gesturePoints[0][1]);
      for (let i = 1; i < gesturePoints.length; i += 1) {
        context.lineTo(gesturePoints[i][0], gesturePoints[i][1]);
      }
      context.stroke();
    }
  };

  const pointerDownHandler = (e) => {
    const x = e.pageX - refCanvas.current.offsetLeft;
    const y = e.pageY - refCanvas.current.offsetTop;
    if (e.pointerType === 'mouse') {
      paint = true;
      addClick(x, y, false);
      redraw();
    } else if (e.pointerType === 'touch') {
      gesturePoints.push([x, y]);
      gesture = true;
      redraw();
    }
  };

  const pointerMoveHandler = (e) => {
    const x = e.pageX - refCanvas.current.offsetLeft;
    const y = e.pageY - refCanvas.current.offsetTop;
    if (e.pointerType === 'mouse') {
      if (paint) {
        addClick(x, y, true);
        redraw();
      } else if (e.pointerType === 'touch') {
        if (gesture) {
          gesturePoints.push(([x, y]));
          redraw();
        }
      }
    }
  };

  const pointerUpEvent = (e) => {
    if (e.pointerType === 'mouse') {
      paint = false;
      addPoints(clickX, clickY, clickDrag);
    } else if (e.pointerType === 'touch') {
      gesture = false;
      // window.console.log(`[[${gesturePoints.join('],[')}]]`);
      const gest = recognizer.check(gesturePoints);
      window.console.log(gest);
      if (gest.name === 'arrow') {
        next();
      }
    }
  };
  useEffect(() => {
    redraw();
  });

  let { post } = '';
  if (postits.length > 0) {
    const pos = postits[posIndex];
    post = (
      <Card className={classes.postit} justify="center" style={{ background: pos.color }}>
        <CardContent>
          <Typography color="textSecondary" gutterBottom>
            {pos.title}
          </Typography>
          <Typography variant="h5" component="h2">
            {pos.text}
          </Typography>
        </CardContent>
        <CardActions>
          <IconButton color="inherit">
            <FavoriteIcon />
          </IconButton>
          <IconButton color="inherit">
            <DeleteIcon />
          </IconButton>
        </CardActions>
        <canvas
          className={classes.canvastyle}
          ref={refCanvas}
          onPointerDown={pointerDownHandler}
          onPointerMove={pointerMoveHandler}
          onPointerUp={pointerUpEvent}
        />
      </Card>
    );
  }
  return (
    <Grid container className={classes.root} justify="center" spacing={2}>
      <Grid key={uuidv4()} item xs={12}>
        {post}
      </Grid>
    </Grid>
  );
}

PostitEditor.propTypes = {
  boards: PropTypes.arrayOf(
    PropTypes.shape({
      type: PropTypes.string,
      id: PropTypes.string,
      title: PropTypes.string,
      notes: PropTypes.string,
      postits: PropTypes.arrayOf(
        PropTypes.shape({
          type: PropTypes.string,
          board: PropTypes.string,
          title: PropTypes.string,
          text: PropTypes.string,
          visible: PropTypes.bool,
          color: PropTypes.string,
          drawing: PropTypes.shape({
            clickX: PropTypes.arrayOf(PropTypes.number),
            clickY: PropTypes.arrayOf(PropTypes.number),
            clickDrag: PropTypes.arrayOf(PropTypes.bool),
          }),
        }),
      ),
    }),
  ).isRequired,
  currentBoard: PropTypes.number.isRequired,
  posIndex: PropTypes.number.isRequired,
  addPoints: PropTypes.func.isRequired,
  next: PropTypes.func.isRequired,
};

const mapStateToProps = (state) => ({
  boards: state.boards,
  currentBoard: state.currentBoard,
  posIndex: state.posIndex,
  index: state.index,
});

const mapDispatchProps = (dispatch) => ({
  addPoints: (x, y, drag) => dispatch(addDrawPoints(x, y, drag, true)),
  next: () => {
    dispatch(nextBoard(true));
    dispatch(resetDrawPoints(true));
  },
});
export default withRouter(connect(mapStateToProps, mapDispatchProps)(PostitEditor));
